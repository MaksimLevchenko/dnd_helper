// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dnd_helper_backend.DataAccess;

#nullable disable

namespace dnd_helper_backend.DataAccess.Migrations
{
    [DbContext(typeof(DndHelperDbContext))]
    [Migration("20241223131051_Character")]
    partial class Character
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArmorClass", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProficienciesArmorArmorId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "ProficienciesArmorArmorId");

                    b.HasIndex("ProficienciesArmorArmorId");

                    b.ToTable("ArmorClass");
                });

            modelBuilder.Entity("ArmsCharacter", b =>
                {
                    b.Property<Guid>("AttacksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("AttacksId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ArmsCharacter");
                });

            modelBuilder.Entity("ArmsClass", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProficienciesWeaponsId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "ProficienciesWeaponsId");

                    b.HasIndex("ProficienciesWeaponsId");

                    b.ToTable("ArmsClass");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Armor", b =>
                {
                    b.Property<Guid>("ArmorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<string>("ArmorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("GrantsDexerityBonus")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxDexterityBonus")
                        .HasColumnType("integer");

                    b.Property<int>("MinStrength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StelsDisadvantage")
                        .HasColumnType("boolean");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("ArmorId");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Arms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("ArmsFeatures")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMelee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSimple")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Arms");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Attack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionCost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Background", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("SkillProficiencies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ToolProficiencies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AlliesAndOrganizations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<Guid>("BackgroundId")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bonds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CharacterRaceRaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("integer");

                    b.Property<string>("DiceHit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Equipment")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Exhausion")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Flaws")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ideals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inspiration")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("Languages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("SavingThrows")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("SkillsExpertise")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("SkillsProficiency")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SkinColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubRaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("TemporaryHitPoints")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Tools")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Treasures")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Weapons")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ideology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterRaceRaceId");

                    b.HasIndex("SubClassId");

                    b.HasIndex("SubRaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("SavingThrows")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Race", b =>
                {
                    b.Property<Guid>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RaceFeatures")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string[]>("Skills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.SubClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("SubClasses");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.SubRace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubraceFeatures")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("SubRaces");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArmorClass", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.Armor", null)
                        .WithMany()
                        .HasForeignKey("ProficienciesArmorArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArmsCharacter", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Arms", null)
                        .WithMany()
                        .HasForeignKey("AttacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArmsClass", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.Arms", null)
                        .WithMany()
                        .HasForeignKey("ProficienciesWeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Armor", b =>
                {
                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Coins", "Price", b1 =>
                        {
                            b1.Property<Guid>("ArmorId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Copper")
                                .HasColumnType("integer");

                            b1.Property<int>("Electrum")
                                .HasColumnType("integer");

                            b1.Property<int>("Golden")
                                .HasColumnType("integer");

                            b1.Property<int>("Platinum")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("ArmorId");

                            b1.ToTable("Armors");

                            b1.ToJson("Price");

                            b1.WithOwner()
                                .HasForeignKey("ArmorId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Arms", b =>
                {
                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Coins", "Price", b1 =>
                        {
                            b1.Property<Guid>("ArmsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Copper")
                                .HasColumnType("integer");

                            b1.Property<int>("Electrum")
                                .HasColumnType("integer");

                            b1.Property<int>("Golden")
                                .HasColumnType("integer");

                            b1.Property<int>("Platinum")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("ArmsId");

                            b1.ToTable("Arms");

                            b1.ToJson("Price");

                            b1.WithOwner()
                                .HasForeignKey("ArmsId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Character", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.Class", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.Race", "CharacterRace")
                        .WithMany()
                        .HasForeignKey("CharacterRaceRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.SubClass", "SubClass")
                        .WithMany()
                        .HasForeignKey("SubClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.SubRace", "SubRace")
                        .WithMany()
                        .HasForeignKey("SubRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dnd_helper_backend.Core.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Attributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Charisma")
                                .HasColumnType("integer");

                            b1.Property<int>("Constitution")
                                .HasColumnType("integer");

                            b1.Property<int>("Dexterity")
                                .HasColumnType("integer");

                            b1.Property<int>("Intelligence")
                                .HasColumnType("integer");

                            b1.Property<int>("Strength")
                                .HasColumnType("integer");

                            b1.Property<int>("Wisdom")
                                .HasColumnType("integer");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Attributes");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Coins", "Coins", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Copper")
                                .HasColumnType("integer");

                            b1.Property<int>("Electrum")
                                .HasColumnType("integer");

                            b1.Property<int>("Golden")
                                .HasColumnType("integer");

                            b1.Property<int>("Platinum")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Coins");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("CharacterClass");

                    b.Navigation("CharacterRace");

                    b.Navigation("Coins")
                        .IsRequired();

                    b.Navigation("SubClass");

                    b.Navigation("SubRace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Race", b =>
                {
                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Attributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("RaceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Charisma")
                                .HasColumnType("integer");

                            b1.Property<int>("Constitution")
                                .HasColumnType("integer");

                            b1.Property<int>("Dexterity")
                                .HasColumnType("integer");

                            b1.Property<int>("Intelligence")
                                .HasColumnType("integer");

                            b1.Property<int>("Strength")
                                .HasColumnType("integer");

                            b1.Property<int>("Wisdom")
                                .HasColumnType("integer");

                            b1.HasKey("RaceId");

                            b1.ToTable("Races");

                            b1.ToJson("Attributes");

                            b1.WithOwner()
                                .HasForeignKey("RaceId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.SubClass", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Class", "Class")
                        .WithMany("SubClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.SubRace", b =>
                {
                    b.HasOne("dnd_helper_backend.Core.Models.Race", "Race")
                        .WithMany("SubRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("dnd_helper_backend.Core.ValueObjects.Attributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("SubRaceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Charisma")
                                .HasColumnType("integer");

                            b1.Property<int>("Constitution")
                                .HasColumnType("integer");

                            b1.Property<int>("Dexterity")
                                .HasColumnType("integer");

                            b1.Property<int>("Intelligence")
                                .HasColumnType("integer");

                            b1.Property<int>("Strength")
                                .HasColumnType("integer");

                            b1.Property<int>("Wisdom")
                                .HasColumnType("integer");

                            b1.HasKey("SubRaceId");

                            b1.ToTable("SubRaces");

                            b1.ToJson("Attributes");

                            b1.WithOwner()
                                .HasForeignKey("SubRaceId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Class", b =>
                {
                    b.Navigation("SubClasses");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.Race", b =>
                {
                    b.Navigation("SubRaces");
                });

            modelBuilder.Entity("dnd_helper_backend.Core.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
